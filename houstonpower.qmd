---
title: "Texas Power Crisis (February 2021)"
author: "Sofia Sarak"
format: html
editor: visual
---

## Initial Set Up

```{r}
#| messages: false
# Loading necessary libraries
library(tidyverse)
library(here)
library(terra)
library(sf)
library(tmap)
```

### Loading in and Cleaning Data

Night Lights
```{r}
#| output: false
# Loading in raster (night light) data
feb7_tile5 <- rast(here("data/VNP46A1/VNP46A1.A2021038.h08v05.001.2021039064328.tif"))
feb7_tile6 <- rast(here("data/VNP46A1/VNP46A1.A2021038.h08v06.001.2021039064329.tif"))
feb16_tile5 <- rast(here("data/VNP46A1/VNP46A1.A2021047.h08v05.001.2021048091106.tif"))
feb16_tile6 <- rast(here("data/VNP46A1/VNP46A1.A2021047.h08v06.001.2021048091105.tif"))
```

We will have to merge these 4 rasters into 2 (by day). 

```{r}
#| execute: false
# Merging rasters together, by day
feb7_lights <- merge(feb7_tile5, feb7_tile6)
feb16_lights <- merge(feb16_tile5, feb16_tile6)
```


Roads
```{r}
#| output: false
# Loading in roads vector data (line object)
roads <- st_read("data/gis_osm_roads_free_1.gpkg",
                 query = "SELECT * FROM gis_osm_roads_free_1 WHERE fclass='motorway'"
)
```
Houses
```{r}
#| output: false
# Loading in houses vector data (multipolygon object)
houses <- st_read(here("data/gis_osm_buildings_a_free_1.gpkg"),
                 query = "SELECT *
FROM gis_osm_buildings_a_free_1
WHERE (type IS NULL AND name IS NULL)
OR type in ('residential', 'apartments', 'house', 'static_caravan', 'detached')")
```
Socioeconomic
```{r}
#| output: false
socioeconomic <- st_layers(here("data/ACS_2019_5YR_TRACT_48_TEXAS.gdb"))
```

### Data Exploration

Are the CRS' the same?
CHECK FOR SCIOECOMIC AS WELL
```{r}
st_crs(houses) == st_crs(roads)
st_crs(feb7_lights) == st_crs(feb16_lights)

st_crs(houses) == st_crs(feb7_lights)
```


## Creating Blackout Mask

We would like to explore only the areas of Houston that experienced a blackout. To do this, we can create a "mask" based on the difference in light intensity from February 7, 2021 and February 16, 2021.

```{r}
# Finding difference in light intensity
# Using raster algebra
diff_light <-  feb7_lights - feb16_lights

# Reclassifying raster
# Creating reclassification matrix
rcl <- matrix(c(-Inf, 200, NA,   # group 1: drop in less than 200 nW cm^-2sr^-1 
                200, Inf,  TRUE),  # group 2: drop in >= 200 nW cm^-2sr^-1 
                ncol = 3, byrow = TRUE
              )
# Using reclass matrix to reclassfiy difference raster
diff_reclass <- classify(diff_light, rcl = rcl)

values(diff_reclass) <- as.factor(values(diff_reclass))
levels(diff_reclass) <- c("Blackout", "No Blackout")

summary(diff_reclass)

# Blackouts = 202 is correct!
```
We can assign all of the areas that experienced a drop of less than 200 nW cm^-2sr^-1 in light intensity (indicator of no blackout) as NA.

```{r}
diff_mask <- diff_reclass
diff_mask_vector[diff_mask_vector < 200] <- NA
```

Vectorizing the mask

```{r}
diff_mask_vector <- as.polygons(diff_mask)
st_as_sf(diff_mask_vector)
```
Spatial Subsetting
```{r}
# find the extent of current raster
terra::ext(diff_mask)

# create a raster with small extent
clip <- rast(xmin = -96.5, xmax = -94.5, ymin = 29, ymax = 30.5, # extent defined using x and y
             resolution = 0.3, # each cell will be 0.3 by 0.3 degree
             vals = 1) # placeholder value that populates each cell, since we are not using actual cell values
                       # because we are just looking for the shape (clip)

# select the values that fall within smaller extent
diff_mask_clip <- diff_mask[clip, drop = FALSE]

# verify that output has fewer values than original
if(ncell(diff_mask) == nrow(diff_mask_clip)){
  warning("clipping did not remove cells")
} else {
  print("clipping removed cells")
}
```

Re-projecting the cropped blackout dataset to EPSG:3083
```{r}
diff_clip_reproj <- project(diff_mask_clip, "espg:3083")
```












## Exclude highways from the cropped blackout mask
Highways may have experienced changes in their night light intensities that are unrelated to the storm. Therefore, we should exclude any locations within 200 meters of all highways in the Houston area.

We can do this by creating a buffer around the roads object, and setting it to 200 meters.
```{r}
#| execute: false
roads_200m <-  st_buffer(roads, dist = units::set_units(200, "m"))
```
The code above eventually threw an error: "cannot convert m into rad". This suggests that the units that the roads data frame is in is not linear. Let's check:
```{r}
# We can explore the CRS/parameters of the data frame
# paremeters = TRUE returns a LOT of details about the CRS, so we specify that we just want to know the units
st_crs(roads, parameters = TRUE)$ud_unit 
```
Like we hypothesized...the roads data frame is in degrees!

We can change the CRS of roads by doing the following:
```{r}
roads_meters <- st_transform(roads, crs = 3083)
```

```{r}
roads_200m <-  st_buffer(roads_meters, dist = units::set_units(200, "m"))
```


```{r}
# this doesn't really work idk idk
tm_shape(roads_200m) +
  tm_polygons() +
tm_shape(roads) +
  tm_lines()
```
Make sure to use st_union() to avoid the cheeto puff lookin things!
